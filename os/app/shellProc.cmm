/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * shellProc.cmm : MP3 プレーヤのメインプロセス
 *
 * 2020.09.07 : 新規作成
 *
 * $Id$
 *
 */
#include <kernel.hmm>
#include <util.hmm>
#include "lcd.hmm"
#include "mp3Proc.hmm"
#include "spi.hmm"
#include "mp3Files.hmm"
#include "mp3PlayList.hmm"
#include "shellProc.hmm"

//-----------------------------------------------------------------------------
// スイッチの読み取り
//-----------------------------------------------------------------------------
// 押しボタンスイッチのビット
#define SW1 0x20
#define SW2 0x10
#define SW3 0x08
#define SW4 0x04
#define SW5 0x02
#define SW6 0x01
#define SWS 0x3f                                    // スイッチのビット全部

int sw0 = 0x00;                                     // 前回の状態(デバウンス前)
int sw1 = 0x00;                                     // 前回の状態(デバウンス後)

int showingScreen = 0;
int showingPlayList = 0;    // 0: all, 1: recent, 2: most
int listScreenSelectedItem = 0;
int playingScreenSelectedItem = 0;    //

int play_volume_num = 3;
int[] screen_play_pos ={0, 3, 5, 7};
char[] fav_path = array(13);
char[][] playingMusic = array(1,13);
char[] volume_char = {'0', '1', '2', '3', '4', '5'};
int showingListPage = 0;
int screen_list_num_bak = 0;

int repeatMode = 0;
int shuffleMode = 0;
int isPlaying = 0;

int playingMusicTime = 0;
int latestProgressCount = 0;
int pastProgressCount = 0;

int readSw() {
  int sw = ~in(0x18) & SWS;                         // スイッチを読み正論理に変換
  int swd = sw & sw0;                               // デバウンス
  int sw2 = (sw1 ^ swd) & swd;                      // 今回，新たに押されたSW
  sw0 = sw;
  sw1 = swd;
  return sw2;
}

int swToNum(int sw) {
  int buttonNumber = -1;
  if ((sw & SW6)!=0) {                              // 6 番のスイッチが押された
    buttonNumber = 6;
  } else if ((sw & SW5)!=0) {                       // 5 番のスイッチが押された
    buttonNumber = 5;
  } else if ((sw & SW4)!=0) {                       // 4 番のスイッチが押された
    buttonNumber = 4;
  } else if ((sw & SW3)!=0) {                       // 3 番のスイッチが押された
    buttonNumber = 3;
  } else if ((sw & SW2)!=0) {                       // 2 番のスイッチが押された
    buttonNumber = 2;
  } else if ((sw & SW1)!=0) {                       // 1 番のスイッチが押された
    buttonNumber = 1;
  }
  return buttonNumber;
}

char[] getPlayingMusicPath(int n){
  if (n < 0) {
    n = 0;
  }

  if (showingPlayList == 0){
    return getPathFromFileName(getMp3FileName(n));
  } else if (showingPlayList == 1) {
    return getPathFromFileName(getRecentMp3Name(n));
  } else {
    return getPathFromFileName(getMostMp3Name(n));
  }

  return null;
}

//-----------------------------------------------------------------------------
// MP3 プレーヤのメインプロセス
//-----------------------------------------------------------------------------
// ここからプロセスの実行が始まる
public void shellMain() {
  spiResetLcd();                                    // sleepを使用するので
  spiResetMp3();                                    //   プロセスが実行する
  mp3FilesInit();                                   // ファイル一覧を作る
  initPlayList();
  lcdInit(showingScreen, null, 0);                  //home画面表示

  for (;;) {
    int sw = readSw();
    int buttonNumber = swToNum(sw);
    if (showingScreen == 0) {
      if (buttonNumber == 1) {
        showingScreen = 1;
        // 画面遷移のメソッド呼び出し
        if (showingPlayList == 0){
          lcdInit(1, getSevenMp3Files(0), 0);
        }
        else if (showingPlayList == 1){
          lcdInit(1, getSevenRecentMp3Name(0), 1);
        }
        else {
          lcdInit(1, getSevenMostMp3Name(0), 2);
        }
      } else if(buttonNumber == 5){
        //アスタリスクの位置の更新
        locateXY(1, showingPlayList + 1);
        putCh('-');
        showingPlayList = (showingPlayList + 1) % 3;
        locateXY(1, showingPlayList + 1);
        putCh('*');
      } else if (buttonNumber == 6){
        //fav_musicの再生
        playingMusic[0] = fav_path;
        lcdInit(2, playingMusic, -1);
        spiResetDecodeTime();
        play(playingMusic[0]);
      }
    } else if (showingScreen == 1) {
      if (buttonNumber == 1) {
        //曲再生
        stop();
        showingScreen = 2;
        if (showingPlayList == 0){
          playingMusic[0] = getMp3FileName(showingListPage * 7 + listScreenSelectedItem);
          }
        else if (showingPlayList == 1){
          playingMusic[0] = getRecentMp3Name(showingListPage * 7 + listScreenSelectedItem);
        }
        else {
          playingMusic[0] = getMostMp3Name(showingListPage * 7 + listScreenSelectedItem);
        }

        playingMusic[0] = getPlayingMusicPath(showingListPage * 7 + listScreenSelectedItem);
        lcdInit(2, playingMusic, -1);
        updateRecentPlayList(showingListPage * 7 + listScreenSelectedItem);
        updateMostPlayList(showingListPage * 7 + listScreenSelectedItem);
        latestProgressCount = 0;
        pastProgressCount = 0;
        spiResetDecodeTime();
        play(playingMusic[0]);
        sleep(5);
        //playingMusicTime = getMp3PlayTime(getPlayingMusicPath(showingListPage * 7 + listScreenSelectedItem));
      } else if (buttonNumber == 2) {
        //ページ戻し
        if (showingListPage > 0) {
          showingListPage = showingListPage - 1;
          if (showingPlayList == 0){
            lcdInit(1, getSevenMp3Files(showingListPage * 7 + listScreenSelectedItem), 0);
          }
          else if (showingPlayList == 1){
            lcdInit(1, getSevenRecentMp3Name(showingListPage * 7 + listScreenSelectedItem), 1);
          }
          else {
            lcdInit(1, getSevenMostMp3Name(showingListPage * 7 + listScreenSelectedItem), 2);
          }
        }
        //リスト参照
        //曲リストを移動（lcd変更）
      } else if (buttonNumber == 3) {
        //ページ進め
        if (showingListPage < getFileNum()/7){
          showingListPage = showingListPage + 1;
          if (showingPlayList == 0){
            lcdInit(1, getSevenMp3Files(showingListPage * 7 + listScreenSelectedItem), 0);
          }
          else if (showingPlayList == 1){
            lcdInit(1, getSevenRecentMp3Name(showingListPage * 7 + listScreenSelectedItem), 1);
          }
          else {
            lcdInit(1, getSevenMostMp3Name(showingListPage * 7 + listScreenSelectedItem), 2);
          }
        }
        //リスト参照
        //曲リストを移動（lcd変更）
      } else if (buttonNumber == 4) {
        showingScreen = 0;
        showingPlayList = 0;
        lcdInit(showingScreen, null, 0);
        //画面遷移
      } else if (buttonNumber == 5) {
        locateXY(1, listScreenSelectedItem+1);//前回のscreen＿list＿buttonNumberの位置の＊を-に変える
        putCh('-');
        listScreenSelectedItem = (listScreenSelectedItem + 1) % 7; //listScreenSelectedItem更新
        locateXY(1, listScreenSelectedItem+1);//screen＿list＿buttonNumberの位置の-を*に変える
        putCh('*');
        //アスタリスクの位置の更新
      } else if (buttonNumber == 6) {
        //fav_musicの登録
        fav_path = getPlayingMusicPath(showingListPage * 7 + listScreenSelectedItem);
      }
    } else if (showingScreen == 2) {
      if (buttonNumber == 1) {
        //playとpauseの切り替え
        if (isPlaying == 0){
          stop();
          latestProgressCount = 0;
          pastProgressCount = 0;
        } else {
          updateRecentPlayList(showingListPage * 7 + listScreenSelectedItem);
          updateMostPlayList(showingListPage * 7 + listScreenSelectedItem);
          playingMusicTime = getMp3PlayTime(getPlayingMusicPath(showingListPage * 7 + listScreenSelectedItem));
          spiResetDecodeTime();
          play(getPlayingMusicPath(showingListPage * 7 + listScreenSelectedItem));
          play(playingMusic[0]);
        }
        isPlaying = (isPlaying + 1) % 2;
      } else if (buttonNumber == 2) {
        if(playingScreenSelectedItem == 0) {
          // 前の曲を再生
          playingMusic[0] = getPlayingMusicPath(showingListPage * 7 + listScreenSelectedItem - 1);
          lcdInit(2, playingMusic, -1);
          updateRecentPlayList(showingListPage * 7 + listScreenSelectedItem);
          updateMostPlayList(showingListPage * 7 + listScreenSelectedItem);
          listScreenSelectedItem = listScreenSelectedItem - 1;
          latestProgressCount = 0;
          pastProgressCount = 0;
          play(playingMusic[0]);
        } else if (playingScreenSelectedItem == 1) {
          repeatMode = (repeatMode + 1) % 2;
          locateXY(10, screen_play_pos[playingScreenSelectedItem]);
          if (repeatMode == 0){
            putStr("TRACK");
          }
          else {
            putStr("OFF  ");
          }
          // repeatが変わったことをplayコマンドに送信？（要相談）
        } else if (playingScreenSelectedItem == 2) {
          shuffleMode = (shuffleMode + 1) % 2;
          locateXY(10, screen_play_pos[playingScreenSelectedItem]);
          if (shuffleMode == 0){
            putStr("ON ");
          }
          else {
            putStr("OFF");
          }
        } else if (playingScreenSelectedItem == 3) {
          if (play_volume_num < 5) {
            locateXY(10, screen_play_pos[playingScreenSelectedItem]);
            play_volume_num = play_volume_num + 1;
            putCh(volume_char[play_volume_num]);
            spiVolumeControl(play_volume_num);
          }
        }
      } else if (buttonNumber == 3) {
        if(playingScreenSelectedItem == 0) {
          // 次の曲を再生
          playingMusic[0] = getPlayingMusicPath(showingListPage * 7 + listScreenSelectedItem + 1);
          lcdInit(2, playingMusic, -1);
          updateRecentPlayList(showingListPage * 7 + listScreenSelectedItem + 1);
          updateMostPlayList(showingListPage * 7 + listScreenSelectedItem + 1);
          listScreenSelectedItem = listScreenSelectedItem + 1;
          latestProgressCount = 0;
          pastProgressCount = 0;
          spiResetDecodeTime();
          play(playingMusic[0]);
        } else if (playingScreenSelectedItem == 1) {
          repeatMode = (repeatMode + 1) % 2;
          locateXY(10, screen_play_pos[playingScreenSelectedItem]);
          if (repeatMode == 0){
            putStr("TRACK");
          }
          else {
            putStr("OFF  ");
          }
          // repeatが変わったことをplayコマンドに送信？（要相談）
        } else if (playingScreenSelectedItem == 2) {
          shuffleMode = (shuffleMode + 1) % 2;
          locateXY(10, screen_play_pos[playingScreenSelectedItem]);
          if (shuffleMode == 0){
            putStr("ON ");
          }
          else {
            putStr("OFF");
          }
        } else if (playingScreenSelectedItem == 3) {
          if (play_volume_num > 0) {
            locateXY(10, screen_play_pos[playingScreenSelectedItem]);
            play_volume_num = play_volume_num - 1;
            putCh(volume_char[play_volume_num]);
            spiVolumeControl(play_volume_num);
          }
        }
      } else if (buttonNumber == 4) {
        showingScreen = 1;
        screen_list_num_bak = listScreenSelectedItem;
        if (showingPlayList == 0){
          lcdInit(1, getSevenMp3Files(0), 0);
        }
        else if (showingPlayList == 1){
          lcdInit(1, getSevenRecentMp3Name(0), 1);
        }
        else {
          lcdInit(1, getSevenMostMp3Name(0), 2);
        }
        listScreenSelectedItem = screen_list_num_bak;
        if(listScreenSelectedItem != 0){
          locateXY(1,1);
          putCh('-');
        }
        locateXY(1,listScreenSelectedItem+1);
        putCh('*');
      } else if (buttonNumber == 5) {
        //アスタリスクの位置の更新
        locateXY(1, screen_play_pos[playingScreenSelectedItem]);
        putCh('-');
        playingScreenSelectedItem = (playingScreenSelectedItem + 1) % 4;
        locateXY(1, screen_play_pos[playingScreenSelectedItem]);
        putCh('*');
      } else if (buttonNumber == 6) {
        //fav_musicの再生
        playingMusic[0] = fav_path;
        lcdInit(2, playingMusic, -1);
        spiResetDecodeTime();
        play(playingMusic[0]);
      }
      //シークバー表示するところ
      #ifdef DEBUG
        // シークバーが12分割により1分割ずつの進み具合が求まるはず?
        // TODO 要調節
        if (playingMusicTime != 0){
          //printF("time: %d ", spiGetDecodeTime()*12 / playingMusicTime);
          // printF("time: %d ", playingMusicTime);
        }
      #endif

      //表示部作成中
      if (playingMusicTime != 0){
        latestProgressCount = spiGetDecodeTime()*12 / playingMusicTime;// 0から11(12?)になるはず
      } else{
        latestProgressCount = 0;
      }
      //progressCountが増えた(変わった)時にシークバー更新．
      if (latestProgressCount != pastProgressCount){
        if(latestProgressCount != 12){
          locateXY(3+pastProgressCount, 1);
          putCh('-');
          locateXY(3+latestProgressCount, 1);
          putCh('+');
          pastProgressCount = latestProgressCount;
        }
      }
    }
    sleep(10);                                      // 10ms に一度
  }
}
