/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * shellProc.cmm : MP3 プレーヤのメインプロセス
 *
 * 2020.09.07 : 新規作成
 *
 * $Id$
 *
 */
#include <kernel.hmm>
#include <util.hmm>
#include "lcd.hmm"
#include "mp3Proc.hmm"
#include "spi.hmm"
#include "mp3Files.hmm"
#include "mp3PlayList.hmm"
#include "shellProc.hmm"

//-----------------------------------------------------------------------------
// スイッチの読み取り
//-----------------------------------------------------------------------------
// 押しボタンスイッチのビット
#define SW1 0x20
#define SW2 0x10
#define SW3 0x08
#define SW4 0x04
#define SW5 0x02
#define SW6 0x01
#define SWS 0x3f                                    // スイッチのビット全部

int sw0 = 0x00;                                     // 前回の状態(デバウンス前)
int sw1 = 0x00;                                     // 前回の状態(デバウンス後)

int screen_mode = 0;
int screen_home_num = 0;    // 0: all, 1: recent, 2: most
int screen_list_num = 0;
int screen_play_num = 0; //
int play_repeat_num = 0;
int play_shuffle_num = 0;
int play_volume_num = 0;
int[] screen_play_pos ={0, 3, 5, 7};
char[] fav_path = array(13);
char[] playingMusic = array(13);
char[] volume_char = {'0', '1', '2', '3', '4', '5'};
int listPage = 0;
boolean isPlaying = false;

int readSw() {
  int sw = ~in(0x18) & SWS;                         // スイッチを読み正論理に変換
  int swd = sw & sw0;                               // デバウンス
  int sw2 = (sw1 ^ swd) & swd;                      // 今回，新たに押されたSW
  sw0 = sw;
  sw1 = swd;
  return sw2;
}

int swToNum(int sw) {
  int num = -1;
  if ((sw & SW6)!=0) {                              // 6 番のスイッチが押された
    num = 6;
  } else if ((sw & SW5)!=0) {                       // 5 番のスイッチが押された
    num = 5;
  } else if ((sw & SW4)!=0) {                       // 4 番のスイッチが押された
    num = 4;
  } else if ((sw & SW3)!=0) {                       // 3 番のスイッチが押された
    num = 3;
  } else if ((sw & SW2)!=0) {                       // 2 番のスイッチが押された
    num = 2;
  } else if ((sw & SW1)!=0) {                       // 1 番のスイッチが押された
    num = 1;
  }
  return num;
}

//-----------------------------------------------------------------------------
// 画面表示
//-----------------------------------------------------------------------------
void demoScreen() {
  cls();                                            // LCDをクリアする
  locateXY(0,0); putStr("MP3 Player demo");
  for (int i=1; i<=5; i=i+1) {                      // スイッチ1〜5に付いて
    locateXY(2,i+1);
    putCh(chr(ord('0')+i));                         // スイッチの番号
    putStr(":");
    char[] fname = mp3FilesGetName(i);              // 対応するファイル名
    if (fname!=null) putStr(fname);
  }
  locateXY(2,7);
  putStr("6:stop");                                 // 6番のスイッチ
}

void asta(int y) {
  demoScreen();
  locateXY(0, y+1);
  putCh('*');
}

char[] getPlayingMusicPath(int n){
  if (n < 0) {
    n = 0;
  }

  if (screen_home_num == 0){
    return getPathFromFileName(mp3FilesGetName(n));
  } else if (screen_home_num == 1) {
    return getPathFromFileName(getRecentMp3Name(n));
  } else {
    return getPathFromFileName(getMostMp3Name(n));
  }

  return null;
}

//-----------------------------------------------------------------------------
// MP3 プレーヤのメインプロセス
//-----------------------------------------------------------------------------
// ここからプロセスの実行が始まる
public void shellMain() {
  spiResetLcd();                                    // sleepを使用するので
  spiResetMp3();                                    //   プロセスが実行する
  mp3FilesInit();                                   // ファイル一覧を作る
  demoScreen();                                     // 画面を初期化
  lcdInit(screen_mode, {{''}}, 0);                  //home画面表示

  for (;;) {
    int sw = readSw();
    int num = swToNum(sw);
    if (screen_mode == 0) {
      if (num == 1) {
        screen_mode = 1;
        // 画面遷移のメソッド呼び出し
        if (screen_home_num == 0){
          lcdInit(1, getSevenmp3Files(0), 0);
        }
        else if (screen_home_num == 1){
          lcdInit(1, getSevenRecentMp3Name(0), 1);
        }
        else {
          lcdInit(1, getSevenMostMp3Name(0), 2);
        }
        //title = ***
        //

      } else if(num == 5){
        screen_home_num = (screen_home_num + 1) % 3;
        //アスタリスクの位置の更新
        locateXY(1, screen_home_num);
        putCh('-');
        if (screen_home_num !=2){
          locateXY(1, screen_home_num+1);
        }
        else {
          locateXY(1, screen_home_num-2);
        }
        putCh('*');
      } else if (num == 6){
        //fav_musicの再生
        playingMusic = fav_path;
        lcdInit(2, PlayingMusic, -1);
        play(fav_path);
      }
    } else if (screen_mode == 1) {
      if (num == 1) {
        //曲再生
        screen_mode = 2;
        if (screen_home_num == 0){
          playingMusic = mp3FilesGetName(listPage * 7 + screen_list_num);
          }
        else if (screen_home_num == 1){
          playingMusic = getRecentMp3Name(listPage * 7 + screen_list_num);
        }
        else {
          playingMusic = getMostMp3Name(listPage * 7 + screen_list_num);
        }

        playingMusic = getPlayingMusicPath(listPage * 7 + screen_list_num);
        lcdInit(2, playingMusic, -1);
        play(playingMusic);
      } else if (num == 2) {
        //ページ戻し
        if (listPage > 0) {
          listPage = listPage - 1;
          if (screen_home_num == 0){
            lcdInit(1, mp3FilesGetName(listPage * 7 + screen_list_num), 0);
          }
          else if (screen_home_num == 1){
            lcdInit(1, getRecentMp3Name(listPage * 7 + screen_list_num), 1);
          }
          else {
            lcdInit(1, getMostMp3Name(listPage * 7 + screen_list_num), 2);
          }
        }
        //リスト参照
        //曲リストを移動（lcd変更）
      } else if (num == 3) {
        //ページ進め
        if (listPage < getFileNum()/7){
          listPage = listPage + 1;
          if (screen_home_num == 0){
            lcdInit(1, mp3FilesGetName(listPage * 7 + screen_list_num), 0);
          }
          else if (screen_home_num == 1){
            lcdInit(1, getRecentMp3Name(listPage * 7 + screen_list_num), 1);
          }
          else {
            lcdInit(1, getMostMp3Name(listPage * 7 + screen_list_num), 2);
          }
        }
        //リスト参照
        //曲リストを移動（lcd変更）
      } else if (num == 4) {
        screen_mode = 0;
        lcdInit(screen_mode, {{''}}, 0);
        //画面遷移
      } else if (num == 5) {
        locateXY(1, screen_home_num+1);//前回のscreen＿list＿numの位置の＊を-に変える
        putCh('-');
        screen_list_num = (screen_list_num + 1) % 7; //screen_list_num更新
        locateXY(1, screen_home_num+1);//screen＿list＿numの位置の-を*に変える
        putCh('*');
        //アスタリスクの位置の更新
      } else if (num == 6) {
        //fav_musicの登録
        fav_path = getPlayingMusicPath(listPage * 7 + screen_list_num);
        playingMusic = fav_path;
        lcdInit(2, PlayingMusic, -1);
        play(fav_path);
      }
    } else if (screen_mode == 2) {

      if (num == 1) {
        //playとpauseの切り替え
        if (isPlaying){
          stop();
        } else {
          //play(getPlayingMusicPath(listPage * 7 + screen_list_num));
          play(playingMusic);
        }
        isPlaying = !isPlaying;
      } else if (num == 2) {
        if(screen_play_num == 0) {
          // 前の曲を再生
          playingMusic = getPlayingMusicPath(listPage * 7 + screen_list_num - 1)
          //play(getPlayingMusicPath(listPage * 7 + screen_list_num - 1));
          lcdInit(2, PlayingMusic, -1)
          play(PlayingMusic)
        } else if (screen_play_num == 1) {
          play_repeat_num = (play_repeat_num + 1) % 2;
          locateXY(3, 10);
          if (play_repeat_num == 0){
            putStr('TRACK');
          }
          else {
            putStr('OFF  ')；
          }
          // repeatが変わったことをplayコマンドに送信？（要相談）
        } else if (screen_play_num == 2) {
          play_shuffle_num = (play_shuffle_num + 1) % 2;
          locateXY(5, 10);
          if (play_shuffle_num == 0){
            putStr('ON ');
          }
          else {
            putStr('OFF')；
          }
        } else if (screen_play_num == 3) {
          if (play_volume_num < 5) {
            locateXY(7, 10);
            play_volume_num = play_volume_num + 1;
            putCh(volume_char[play_volume_num]);
            spiVolumeControl(play_volume_num);
          }
        }
      } else if (num == 3) {
        if(screen_play_num == 0) {
          // 次の曲を再生
          PlayingMusic = getPlayingMusicPath(listPage * 7 + screen_list_num + 1);
          lcdInit(2, PlayingMusic, -1);
          play(PlayingMusic);
        } else if (screen_play_num == 1) {
          play_repeat_num = (play_repeat_num + 1) % 2;
          locateXY(3, 10);
          if (play_repeat_num == 0){
            putStr('TRACK');
          }
          else {
            putStr('OFF  ')；
          }
          // repeatが変わったことをplayコマンドに送信？（要相談）
        } else if (screen_play_num == 2) {
          play_shuffle_num = (play_shuffle_num + 1) % 2;
          locateXY(5, 10);
          if (play_shuffle_num == 0){
            putStr('ON ');
          }
          else {
            putStr('OFF')；
          }
        } else if (screen_play_num == 3) {
          if (play_volume_num > 0) {
            locateXY(7, 10);
            play_volume_num = play_volume_num - 1;
            putCh(volume_char[play_volume_num]);
            spiVolumeControl(play_volume_num);
          }
        }
      } else if (num == 4) {
        screen_mode = 1;
        //画面遷移
      } else if (num == 5) {
        //アスタリスクの位置の更新
        locateXY(2, screen_play_pos[screen_play_num]);
        putCh('-');
        screen_play_num = (screen_play_num + 1) % 4;
        locateXY(2, screen_play_pos[screen_play_num]);
        putCh('*');
      }
      } else if (num == 6) {
        //fav_musicの再生
        playingMusic = fav_path;
        lcdInit(2, PlayingMusic, -1);
        play(fav_path);
      }
      //シークバー表示するところ
    }
    sleep(10);                                      // 10ms に一度
  }
}
