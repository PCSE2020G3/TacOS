/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * mp3Files.cmm : MP3ファイルの一覧
 *
 * 2020.09.16 : 新規作成
 *
 * $Id$
 *
 */
#include <fs.hmm>

#include <util.hmm>
#include "appUtil.hmm"
#include "mp3Files.hmm"


//-----------------------------------------------------------------------------
// MP3ファイルの一覧（ただし，最大５個）
//-----------------------------------------------------------------------------
// 32このファイル名
char[][] fnames = array(32, 13);                     // 12345678.123
char[][] allMp3Files = array(32, 13);
int numFile;                                          // ファイルの個数

char[] mp3Dir = "/MP3";
char[] path = array(18);                             // /MP3/12345678.123

char[] fnameToPath(char[] fname) {
  strCpy(path, mp3Dir);
  strCat(path, "/");
  strCat(path, fname);
  return path;
}

Stat mp3Stat = {0, 0, 0, 0};

// 読み出しバッファ
char[] buf = array(32);
int[] rates = {1, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 1};

public int getFileNum(){
  return numFile;
}

public int getMp3BitRate(char[] mp3Path){
  int fd = open(path, READ_MODE);           // ファイルをオープン
  if (fd < 0) {                               // オープンできない
    panic("panic:can't open MP3 File");
  }
  if (read(fd, buf, 32) == -1) {
    return 1;
  }
  int bitRate = ord(buf[2]) & 0x0f;
  close(fd);

  #ifdef DEBUG
                               // ファイルをクローズ
  if (stat(mp3Path, mp3Stat) == -1) {
    printF("error");
  }
    printF("clst: %d", mp3Stat.clst);
    printF("rate: %d", (rates[bitRate]));
    printF("time: %d", mp3Stat.lenL);
  #endif

  return mp3Stat.lenL / (rates[bitRate] * 1000);
}

// /MP3 ディレクトリからファイルの一覧を作る（初期化）
public void mp3FilesInit() {
  int fd;                                           // ファイルディスクリプタ
  if ((fd=open(mp3Dir, READ_MODE))<0) {
    panic("panic:can't open MP3 Dir");
  }
  Dir dir;
  int i = 0;
  while (i<32 && (dir=readDir(fd, "MP3"))!=null) { // 最大100こファイル名を読む
    strCpy(fnames[i], dir.name);
    i = i + 1;
  }
  numFile = i;
  close(fd);
}

// n 番目ファイル名を返す（1<=n && n<=100）
public char[] getMp3FileName(int n) {
  if (1<=n && n<=numFile) {
    return fnames[n-1];
  }
  return null;
}

public char[][] getSevenMp3Files(int start){
  for (int i=0; i<7; i=i+1){
    if (getMp3FileName(start + i +1) != null){
      allMp3Files[i] = getMp3FileName(start + i +1);
    } else {
      allMp3Files[i] = "NONE";
    }
  }
  return allMp3Files;
}

// n 番目パス名を返す（1<=n && n<=100）
public char[] getPathFromFileName(char[] fileName) {
  return fnameToPath(fileName);
}
